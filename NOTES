Terminal input is a little bit messy. So, what's working in termbox?

1. Termbox supports only few special keys. Main reason for that, that
they are available on all major terminals.

Full list of functional keys:
F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, 
INSERT, DELETE, HOME, END, PGUP, PGDN, 
KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT

And that's it. If you don't want input problems, stick to these.

2. Termbox support all major ASCII combinations, but there are some
interesting moments. Particulary there are a lot of key clashes (few
keys or combos does the same thing). I can list all of these.

CTRL+I, TAB (0x09)
CTRL+2, CTRL+TILDE (0x00)
CTRL+H, BACKSPACE (0x08)
CTRL+M, ENTER (0x0D)
CTRL+3, ESC, CTRL+[ (0x1B) [alt emits ESC too]
CTRL+4, CTRL+BACKSLASH (0x1C)
CTRL+5, CTRL+] (0x1D)
CTRL+7, CTRL+SLASH, CTRL+UNDERSCORE (0x1F)
CTRL+8, BACKSPACE2 (0x7F) [ASCII 'DELETE' key]

Some terminals emit ASCII 'DELETE' as BACKSPACE, and real BACKSPACE 
as CTRL+BACKSPACE. The point is, it is possible that some terminals
do thing in a different ways. I'm not sure right now, should I fix this.

3. Termbox supports two input parsing mode.
   - TB_INPUT_ESC - It checks known ESC sequences and if there is no match
     0x1B (ESC) symbol is TB_KEY_ESC. Alt+<KEY> combinations don't work.
   - TB_INPUT_ALT - It checks known ESC sequences and if there is no match
     0x1B enables ALT modifier, and next known key event emits with 
     TB_MOD_ALT set.

You can switch between these two modes using tb_select_input_mode() func.

4. Termbox supports *only* the UTF-8 encoding on input and on output. Get a 
decent terminal emulator with support! Also it means that it will probably
work with ASCII keymaps. UTF-8 is backward compatible with ASCII.
